import Head from "next/head";
import Card from "../components/Card/Card";
import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useQuery } from "react-query";
import Loading from "@/components/loading/Loading";
import SideBar from "@/components/SideBar/SideBar";
import { BsMoonStarsFill, BsFillSunFill } from "react-icons/bs";
import { BsChevronLeft, BsChevronRight } from "react-icons/bs";
import { getFilters } from "@/state/actions/filtersActions";
import Link from "next/link";

export default function Home() {
  const [page, setPage] = useState(1);
  const [filter, setFilter] = useState({
    name: "",
    especie: "",
    status: "",
    genero: "",
  });
  const filtersData = useSelector((state: any) => state);
  const dispatch = useDispatch();

  const fetchCharacters = async (page, filter) => {
    const res = await fetch(
      `https://rickandmortyapi.com/api/character?page=${page}&name=${filter.name}&status=${filter.status}&species=${filter.especie}&gender=${filter.genero}`
    );
    return res.json();
  };

  const { isLoading, isError, error, data, isFetching } = useQuery(
    ["Characters", page, filtersData.filters.filtersData],
    () => fetchCharacters(page, filtersData.filters.filtersData),
    { keepPreviousData: true }
  );

  useEffect(() => {
    dispatch(
      getFilters({
        name: "",
        especie: "",
        status: "",
        genero: "",
      })
    );
  }, []);

  if (isLoading) return <Loading />;
  console.log(data);
  //if (error) return 'An error has occurred: ' + error.message
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="center-container">
        <SideBar />
        <div className="main">
          <div className="main-header">
            <h2>Personagens</h2>
            <Link href={"/favoritos"}>
              <h4>Ver Favoritos</h4>
            </Link>
            <div id="darkmode">
              <input type="checkbox" className="checkbox" id="checkbox" />
              <label htmlFor="checkbox" className="label">
                <BsMoonStarsFill color="white" />
                <BsFillSunFill color="yellow" />
                <div className="ball"></div>
              </label>
            </div>
          </div>
          {!data.results && data.results == undefined ? (
            <></>
          ) : (
            <div className="nav btn-container">
              <button
                className="page-btn"
                onClick={() =>
                  setPage((prevState) => Math.max(prevState - 1, 0))
                }
                disabled={page === 1}
              >
                <BsChevronLeft size="3rem" color="#63cbfb" />
              </button>
              <span>{page}</span>
              <button
                className="page-btn"
                onClick={() => setPage((prevState) => prevState + 1)}
                disabled={page === data.info.pages}
              >
                <BsChevronRight size="3rem" color="#63cbfb" />
              </button>
            </div>
          )}
          {!data.results && data.results == undefined ? (
            <>
              {data.error ===  "There is nothing here"?<span>Nenhum resultado encontrado</span>:<span>Loading</span>}
            </>
          ) : (
            data.results.map(
              (c: { id: number; image: string; name: string }) => (
                <Card key={c.id} img={c.image} name={c.name} id={c.id} />
              )
            )
          )}
          {!data.results && data.results == undefined ? (
            <></>
          ) : (
            <div className="nav btn-container">
              <button
                className="page-btn"
                onClick={() =>
                  setPage((prevState) => Math.max(prevState - 1, 0))
                }
                disabled={page === 1}
              >
                <BsChevronLeft size="3rem" color="#63cbfb" />
              </button>
              <span>{page}</span>
              <button
                className="page-btn"
                onClick={() => setPage((prevState) => prevState + 1)}
                disabled={page === data.info.pages}
              >
                <BsChevronRight size="3rem" color="#63cbfb" />
              </button>
            </div>
          )}
        </div>
      </div>
    </>
  );
}
